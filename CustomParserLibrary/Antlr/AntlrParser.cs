//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Antlr.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class AntlrParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, OP_LOGIC=8, OP_COMPARE=9, 
		OP_MATH=10, NUM=11, VAR=12, ID=13, WS=14;
	public const int
		RULE_ifThenElseBlock = 0, RULE_thenBlock = 1, RULE_elseBlock = 2, RULE_elseIfBlock = 3, 
		RULE_assignExpr = 4, RULE_booleanExpr = 5, RULE_expr = 6;
	public static readonly string[] ruleNames = {
		"ifThenElseBlock", "thenBlock", "elseBlock", "elseIfBlock", "assignExpr", 
		"booleanExpr", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'IF'", "'THEN'", "'END_IF'", "'ELSE'", "'ELSE IF'", "':='", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "OP_LOGIC", "OP_COMPARE", 
		"OP_MATH", "NUM", "VAR", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Antlr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AntlrParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AntlrParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AntlrParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IfThenElseBlockContext : ParserRuleContext {
		public BooleanExprContext @if;
		public ThenBlockContext then;
		public ElseIfBlockContext _elseIfBlock;
		public IList<ElseIfBlockContext> _elseIf = new List<ElseIfBlockContext>();
		public ElseBlockContext @else;
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExprContext booleanExpr() {
			return GetRuleContext<BooleanExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenBlockContext thenBlock() {
			return GetRuleContext<ThenBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext[] elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfThenElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseBlockContext ifThenElseBlock() {
		IfThenElseBlockContext _localctx = new IfThenElseBlockContext(Context, State);
		EnterRule(_localctx, 0, RULE_ifThenElseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			Match(T__0);
			State = 15;
			_localctx.@if = booleanExpr(0);
			State = 16;
			Match(T__1);
			State = 17;
			_localctx.then = thenBlock();
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 18;
				_localctx._elseIfBlock = elseIfBlock();
				_localctx._elseIf.Add(_localctx._elseIfBlock);
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 24;
				_localctx.@else = elseBlock();
				}
			}

			State = 27;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenBlockContext : ParserRuleContext {
		public AssignExprContext _assignExpr;
		public IList<AssignExprContext> _actions = new List<AssignExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext[] assignExpr() {
			return GetRuleContexts<AssignExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr(int i) {
			return GetRuleContext<AssignExprContext>(i);
		}
		public ThenBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenBlockContext thenBlock() {
		ThenBlockContext _localctx = new ThenBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_thenBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 29;
				_localctx._assignExpr = assignExpr();
				_localctx._actions.Add(_localctx._assignExpr);
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public AssignExprContext _assignExpr;
		public IList<AssignExprContext> _actions = new List<AssignExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext[] assignExpr() {
			return GetRuleContexts<AssignExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr(int i) {
			return GetRuleContext<AssignExprContext>(i);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_elseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			Match(T__3);
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 35;
				_localctx._assignExpr = assignExpr();
				_localctx._actions.Add(_localctx._assignExpr);
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public BooleanExprContext predicate;
		public AssignExprContext _assignExpr;
		public IList<AssignExprContext> _actions = new List<AssignExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExprContext booleanExpr() {
			return GetRuleContext<BooleanExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext[] assignExpr() {
			return GetRuleContexts<AssignExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignExprContext assignExpr(int i) {
			return GetRuleContext<AssignExprContext>(i);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_elseIfBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(T__4);
			State = 41;
			_localctx.predicate = booleanExpr(0);
			State = 42;
			Match(T__1);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 43;
				_localctx._assignExpr = assignExpr();
				_localctx._actions.Add(_localctx._assignExpr);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VAR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignExprContext : ParserRuleContext {
		public IToken var;
		public ExprContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(AntlrParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignExprContext assignExpr() {
		AssignExprContext _localctx = new AssignExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			_localctx.var = Match(VAR);
			State = 49;
			Match(T__5);
			State = 50;
			_localctx.value = expr(0);
			State = 51;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExprContext : ParserRuleContext {
		public BooleanExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpr; } }
	 
		public BooleanExprContext() { }
		public virtual void CopyFrom(BooleanExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PredicateExprContext : BooleanExprContext {
		public BooleanExprContext left;
		public IToken op;
		public BooleanExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExprContext[] booleanExpr() {
			return GetRuleContexts<BooleanExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExprContext booleanExpr(int i) {
			return GetRuleContext<BooleanExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LOGIC() { return GetToken(AntlrParser.OP_LOGIC, 0); }
		public PredicateExprContext(BooleanExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableCheckExprContext : BooleanExprContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(AntlrParser.VAR, 0); }
		public VariableCheckExprContext(BooleanExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableCheckExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicExprContext : BooleanExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LOGIC() { return GetToken(AntlrParser.OP_LOGIC, 0); }
		public LogicExprContext(BooleanExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExprContext : BooleanExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COMPARE() { return GetToken(AntlrParser.OP_COMPARE, 0); }
		public CompareExprContext(BooleanExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExprContext booleanExpr() {
		return booleanExpr(0);
	}

	private BooleanExprContext booleanExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BooleanExprContext _localctx = new BooleanExprContext(Context, _parentState);
		BooleanExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_booleanExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				_localctx = new LogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 54;
				((LogicExprContext)_localctx).left = expr(0);
				State = 55;
				((LogicExprContext)_localctx).op = Match(OP_LOGIC);
				State = 56;
				((LogicExprContext)_localctx).right = expr(0);
				}
				break;
			case 2:
				{
				_localctx = new CompareExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 58;
				((CompareExprContext)_localctx).left = expr(0);
				State = 59;
				((CompareExprContext)_localctx).op = Match(OP_COMPARE);
				State = 60;
				((CompareExprContext)_localctx).right = expr(0);
				}
				break;
			case 3:
				{
				_localctx = new VariableCheckExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62;
				((VariableCheckExprContext)_localctx).name = Match(VAR);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 70;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PredicateExprContext(new BooleanExprContext(_parentctx, _parentState));
					((PredicateExprContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_booleanExpr);
					State = 65;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 66;
					((PredicateExprContext)_localctx).op = Match(OP_LOGIC);
					State = 67;
					((PredicateExprContext)_localctx).right = booleanExpr(5);
					}
					} 
				}
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableExprContext : ExprContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(AntlrParser.VAR, 0); }
		public VariableExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MATH() { return GetToken(AntlrParser.OP_MATH, 0); }
		public MathExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExprContext : ExprContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(AntlrParser.NUM, 0); }
		public NumberExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAntlrVisitor<TResult> typedVisitor = visitor as IAntlrVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				{
				_localctx = new NumberExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 74;
				((NumberExprContext)_localctx).value = Match(NUM);
				}
				break;
			case VAR:
				{
				_localctx = new VariableExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 75;
				((VariableExprContext)_localctx).name = Match(VAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 83;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MathExprContext(new ExprContext(_parentctx, _parentState));
					((MathExprContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 78;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 79;
					((MathExprContext)_localctx).op = Match(OP_MATH);
					State = 80;
					((MathExprContext)_localctx).right = expr(4);
					}
					} 
				}
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return booleanExpr_sempred((BooleanExprContext)_localctx, predIndex);
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool booleanExpr_sempred(BooleanExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,14,87,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		1,0,1,0,1,0,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,0,3,0,26,8,0,1,0,1,0,1,1,
		4,1,31,8,1,11,1,12,1,32,1,2,1,2,4,2,37,8,2,11,2,12,2,38,1,3,1,3,1,3,1,
		3,4,3,45,8,3,11,3,12,3,46,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,3,5,64,8,5,1,5,1,5,1,5,5,5,69,8,5,10,5,12,5,72,9,5,1,6,
		1,6,1,6,3,6,77,8,6,1,6,1,6,1,6,5,6,82,8,6,10,6,12,6,85,9,6,1,6,0,2,10,
		12,7,0,2,4,6,8,10,12,0,0,89,0,14,1,0,0,0,2,30,1,0,0,0,4,34,1,0,0,0,6,40,
		1,0,0,0,8,48,1,0,0,0,10,63,1,0,0,0,12,76,1,0,0,0,14,15,5,1,0,0,15,16,3,
		10,5,0,16,17,5,2,0,0,17,21,3,2,1,0,18,20,3,6,3,0,19,18,1,0,0,0,20,23,1,
		0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,25,1,0,0,0,23,21,1,0,0,0,24,26,3,
		4,2,0,25,24,1,0,0,0,25,26,1,0,0,0,26,27,1,0,0,0,27,28,5,3,0,0,28,1,1,0,
		0,0,29,31,3,8,4,0,30,29,1,0,0,0,31,32,1,0,0,0,32,30,1,0,0,0,32,33,1,0,
		0,0,33,3,1,0,0,0,34,36,5,4,0,0,35,37,3,8,4,0,36,35,1,0,0,0,37,38,1,0,0,
		0,38,36,1,0,0,0,38,39,1,0,0,0,39,5,1,0,0,0,40,41,5,5,0,0,41,42,3,10,5,
		0,42,44,5,2,0,0,43,45,3,8,4,0,44,43,1,0,0,0,45,46,1,0,0,0,46,44,1,0,0,
		0,46,47,1,0,0,0,47,7,1,0,0,0,48,49,5,12,0,0,49,50,5,6,0,0,50,51,3,12,6,
		0,51,52,5,7,0,0,52,9,1,0,0,0,53,54,6,5,-1,0,54,55,3,12,6,0,55,56,5,8,0,
		0,56,57,3,12,6,0,57,64,1,0,0,0,58,59,3,12,6,0,59,60,5,9,0,0,60,61,3,12,
		6,0,61,64,1,0,0,0,62,64,5,12,0,0,63,53,1,0,0,0,63,58,1,0,0,0,63,62,1,0,
		0,0,64,70,1,0,0,0,65,66,10,4,0,0,66,67,5,8,0,0,67,69,3,10,5,5,68,65,1,
		0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,11,1,0,0,0,72,70,1,
		0,0,0,73,74,6,6,-1,0,74,77,5,11,0,0,75,77,5,12,0,0,76,73,1,0,0,0,76,75,
		1,0,0,0,77,83,1,0,0,0,78,79,10,3,0,0,79,80,5,10,0,0,80,82,3,12,6,4,81,
		78,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,13,1,0,0,0,85,
		83,1,0,0,0,9,21,25,32,38,46,63,70,76,83
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
